{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch \n",
    "import torchvision as thv\n",
    "from torchvision import transforms\n",
    "import  torch as th\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "from utils_2 import  check_mkdir \n",
    "from utils_2 import  train_epoch, data_iter, transfer, projection\n",
    "from utils_2 import  test_target, test_source, test, transfer\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from collections import defaultdict\n",
    "\n",
    "from Res_model import CNN_torch, CNN\n",
    "import os, pdb, sys, json, subprocess, \\\n",
    "       time, logging, argparse, \\\n",
    "       pickle, math, gzip, numpy as np, \\\n",
    "       glob\n",
    "\n",
    "from backpack import extend, backpack\n",
    "from backpack.extensions import BatchGrad, SumGradSquared, Variance, BatchL2Grad\n",
    "#from gpu_memory_log import gpu_memory_log\n",
    "\n",
    "#import matplotlib.pylab as pl\n",
    "import random\n",
    "import ot\n",
    "import ot.plot\n",
    "from ot.datasets import make_1D_gauss as gauss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "transform_train = transforms.Compose([\n",
    "    transforms.RandomCrop(32, padding=4),\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.ToTensor(),\n",
    "    #transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)), \n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.ToTensor(),\n",
    "    #transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)), \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size_test = 1000\n",
    "learning_rate = 1e-3\n",
    "momentum = 0\n",
    "log_interval = 12\n",
    "train_size = 200\n",
    "stat = defaultdict(dict)\n",
    "stat[ 'n_epochs' ] = 80\n",
    "stat['bsize'] = 4\n",
    "stat['iterations'] = 8 #num for itrs for couplings updates\n",
    "stat['weight_decay'] = 5e-4\n",
    "stat['dev'] = 'cuda: 2' if torch.cuda.is_available() else 'cpu' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#saving path\n",
    "MNIST_tran_ini = './CIFAR_initialstatus'\n",
    "stat['savingmodel'] = './CIFAR_stat'\n",
    "check_mkdir(stat['savingmodel'] )\n",
    "check_mkdir(MNIST_tran_ini )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    }
   ],
   "source": [
    "##animal and vehicle dataset\n",
    "for i in range (2):\n",
    "    if i == 0:\n",
    "        index = [ 2, 3, 4, 5, 6, 7 ]\n",
    "    else:\n",
    "        index = [ 0, 1, 8, 9 ]\n",
    "    train = thv.datasets.CIFAR10(root='./data', train=True,\n",
    "                                        download=True, transform=transform_train)  \n",
    "    train.targets = torch.tensor( train.targets )\n",
    "    for k in range( len(index) ):\n",
    "        if k == 0:\n",
    "            idx = train.targets == index[k]\n",
    "        else:\n",
    "            idx += train.targets == index[k]\n",
    "    train.targets= train.targets[idx]\n",
    "    train.data = train.data[idx.numpy().astype(np.bool)]\n",
    "    #train0 = train\n",
    "    train0, _ = torch.utils.data.random_split(train, \n",
    "                                                                [train_size, len(train)- train_size ])\n",
    "    \n",
    "    if i == 0:\n",
    "        stat['source'] = train0\n",
    "    else:\n",
    "        stat['target'] = train0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define train loader and validation loader\n",
    "stat['svl'] = DataLoader( stat['source'], batch_size=1000, \n",
    "                             shuffle=False, drop_last = False)\n",
    "stat['tvl'] = DataLoader( stat['target'], batch_size=1000, \n",
    "                             shuffle=False, drop_last = False)\n",
    "\n",
    "stat['sdl'] = DataLoader( stat['source'], batch_size=stat['bsize'], \n",
    "                             shuffle=True, drop_last = False)\n",
    "stat['tdl'] = DataLoader( stat['target'], batch_size=stat['bsize'], \n",
    "                             shuffle=True, drop_last = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##display images###\n",
    "import matplotlib.pyplot as plt \n",
    "def imshow(img):\n",
    "    img = img / 2 + 0.5     # unnormalize\n",
    "    npimg = img.numpy()\n",
    "    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n",
    "    plt.show()\n",
    "    \n",
    "images, labels = stat['source'][1]\n",
    "#images, labels = sub[0]\n",
    "\n",
    "# show images\n",
    "imshow(thv.utils.make_grid(images))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pre train model on source task and save the model\n",
    "#for epoch in range( 12 ):\n",
    "#    train_epoch(network, stat, optimizer)\n",
    "#    if (epoch + 1) %2 == 0:\n",
    " #       test(stat, network )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#torch.save(\n",
    "#    network.state_dict(), \n",
    " #                  os.path.join(MNIST_tran_ini, \n",
    " #                              'CNN={}.pth'.format( ( 'animal', 'vehicle' ) )\n",
    "#                               )\n",
    "#)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load pre-trained model\n",
    "network = CNN().to(stat['dev'])\n",
    "network.load_state_dict(\n",
    "    torch.load(\n",
    "        os.path.join(\n",
    "            MNIST_tran_ini, 'CNN={}.pth'.format( ( 'animal', 'vehicle') )\n",
    "        )))\n",
    "\n",
    "optimizer = optim.SGD( network.parameters()\n",
    "                      , lr=1e-3, momentum=0.9, weight_decay = stat['weight_decay']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/gaoyans/envs/gtorch/lib/python3.6/site-packages/ipykernel_launcher.py:18: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "/home/gaoyans/envs/gtorch/lib/python3.6/site-packages/ipykernel_launcher.py:19: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "/home/gaoyans/envs/gtorch/lib/python3.6/site-packages/ipykernel_launcher.py:21: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time used is  45.70720958709717\n"
     ]
    }
   ],
   "source": [
    "#Set up\n",
    "stat['T'] = int(( len(stat['source']) / stat['bsize']) * stat[ 'n_epochs' ]) \n",
    "stat['interval'] = int( stat['T'] / 25) \n",
    "#stat['cp'][0] = np.ones( ( len(stat['source']) ,  len(stat['target']) )  ) / ( \n",
    "#    len(stat['source']) *  len(stat['target']))\n",
    "stat['cp'][0]  =np.identity( len(stat['source']) ) / len(stat['source']) \n",
    "stat['la'][0] = 0\n",
    "\n",
    "###comouting model predictions for source images\n",
    "start = time.time()\n",
    "network.eval()  \n",
    "ns, nt = len( stat['source'] ), len( stat['target'] )  \n",
    "with torch.no_grad():\n",
    "    for m in range( ns ): \n",
    "        for n in range( nt ):\n",
    "            xs, ys = stat['source'][ m ]\n",
    "            xt, yt = stat['target'][ n ]\n",
    "            xs, ys = xs.unsqueeze(0).to(stat['dev']), torch.tensor(ys).view(-1).to(stat['dev']) \n",
    "            xt, yt = xt.unsqueeze(0).to(stat['dev']), torch.tensor(yt).view(-1).to(stat['dev'])\n",
    "            x =  xs\n",
    "            stat['pred'][ ( 0, m, n) ] = F.softmax(  network(x) )\n",
    "            \n",
    "print('Time used is ', time.time() - start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 itr\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/gaoyans/CPMmanifold /utils_2.py:121: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  xs, ys = xs.unsqueeze(0).to(stat['dev']), torch.tensor(ys).view(-1).to(stat['dev'])\n",
      "/home/gaoyans/CPMmanifold /utils_2.py:126: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  xt, yt = xt.unsqueeze(0).to(stat['dev']), torch.tensor(yt).view(-1).to(stat['dev'])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#####source loss######\n",
      "\n",
      "Test set: Avg. loss: 0.1534, Accuracy: 190/200 (95%)\n",
      "\n",
      "#####target loss######\n",
      "\n",
      "Test set: Avg. loss: 7.7970, Accuracy: 0/200 (0%)\n",
      "\n",
      "Time used is  0.6858129501342773\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/gaoyans/CPMmanifold /utils_2.py:68: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n",
      "  output = F.log_softmax(  network(data) )\n",
      "/home/gaoyans/envs/gtorch/lib/python3.6/site-packages/torch/nn/_reduction.py:43: UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead.\n",
      "  warnings.warn(warning.format(ret))\n",
      "/home/gaoyans/CPMmanifold /utils_2.py:49: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n",
      "  output = F.log_softmax(  network(data) )\n",
      "/home/gaoyans/CPMmanifold /utils_2.py:220: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  xs, ys = xs.unsqueeze(0).to(stat['dev']), torch.tensor(ys).view(-1).to(stat['dev'])\n",
      "/home/gaoyans/CPMmanifold /utils_2.py:221: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  xt, yt = xt.unsqueeze(0).to(stat['dev']), torch.tensor(yt).view(-1).to(stat['dev'])\n",
      "/home/gaoyans/CPMmanifold /utils_2.py:231: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n",
      "  stat['pred'][ ( kt, m, n) ] = F.softmax(  network(x) )\n",
      "/home/gaoyans/CPMmanifold /utils_2.py:235: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n",
      "  pred1 = F.softmax(  network(x1) )\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#####source loss######\n",
      "\n",
      "Test set: Avg. loss: 0.1676, Accuracy: 200/200 (100%)\n",
      "\n",
      "#####target loss######\n",
      "\n",
      "Test set: Avg. loss: 3.2552, Accuracy: 0/200 (0%)\n",
      "\n",
      "Time used is  315.233008146286\n"
     ]
    }
   ],
   "source": [
    "#couplings updates block\n",
    "saving = defaultdict(dict)\n",
    "for itr in range( stat['iterations'] ):\n",
    "    network = CNN()\n",
    "    network.load_state_dict(\n",
    "        torch.load(\n",
    "            os.path.join(\n",
    "                MNIST_tran_ini, 'CNN={}.pth'.format( ( 'animal', 'vehicle') )\n",
    "            )))\n",
    "    network = network.to(stat['dev'])\n",
    "    projection(network, MNIST_tran_ini, stat, saving, itr)\n",
    "    stat[ 'distance' ][ itr ] = torch.tensor( stat['cp'][itr] * stat['r_dist'][itr] ).sum()\n",
    "    saving['distance'][itr] = stat[ 'distance' ][ itr ]\n",
    "    print( stat[ 'distance' ][ itr ], 'riemann distance at ', itr )\n",
    "    print( torch.tensor( stat['cp'][itr + 1] * stat['r_dist'][itr] ).sum() )\n",
    "    print( torch.tensor( stat['cp'][itr + 1] * stat['tr_loss'][itr] ).sum(), 'loss' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
